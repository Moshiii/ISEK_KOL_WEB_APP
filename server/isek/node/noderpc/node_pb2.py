# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: node.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='node.proto',
  package='isek_node',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\nnode.proto\x12\tisek_node\"\x13\n\x11P2PContextRequest\":\n\x12P2PContextResponse\x12\x0f\n\x07peer_id\x18\x01 \x01(\t\x12\x13\n\x0bp2p_address\x18\x02 \x01(\t\"P\n\x0b\x43\x61llRequest\x12\x16\n\x0esender_node_id\x18\x01 \x01(\t\x12\x18\n\x10receiver_node_id\x18\x02 \x01(\t\x12\x0f\n\x07message\x18\x03 \x01(\t\"\x1d\n\x0c\x43\x61llResponse\x12\r\n\x05reply\x18\x01 \x01(\t\"X\n\x0f\x43\x61llPeerRequest\x12\x16\n\x0esender_node_id\x18\x01 \x01(\t\x12\x1c\n\x14receiver_p2p_address\x18\x02 \x01(\t\x12\x0f\n\x07message\x18\x03 \x01(\t\"!\n\x10\x43\x61llPeerResponse\x12\r\n\x05reply\x18\x01 \x01(\t2J\n\x0fIsekNodeService\x12\x37\n\x04\x63\x61ll\x12\x16.isek_node.CallRequest\x1a\x17.isek_node.CallResponse2\xa6\x01\n\x12IsekP2PNodeService\x12\x44\n\tcall_peer\x12\x1a.isek_node.CallPeerRequest\x1a\x1b.isek_node.CallPeerResponse\x12J\n\x0bp2p_context\x12\x1c.isek_node.P2PContextRequest\x1a\x1d.isek_node.P2PContextResponseb\x06proto3'
)




_P2PCONTEXTREQUEST = _descriptor.Descriptor(
  name='P2PContextRequest',
  full_name='isek_node.P2PContextRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=25,
  serialized_end=44,
)


_P2PCONTEXTRESPONSE = _descriptor.Descriptor(
  name='P2PContextResponse',
  full_name='isek_node.P2PContextResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='peer_id', full_name='isek_node.P2PContextResponse.peer_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='p2p_address', full_name='isek_node.P2PContextResponse.p2p_address', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=46,
  serialized_end=104,
)


_CALLREQUEST = _descriptor.Descriptor(
  name='CallRequest',
  full_name='isek_node.CallRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='sender_node_id', full_name='isek_node.CallRequest.sender_node_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='receiver_node_id', full_name='isek_node.CallRequest.receiver_node_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='message', full_name='isek_node.CallRequest.message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=106,
  serialized_end=186,
)


_CALLRESPONSE = _descriptor.Descriptor(
  name='CallResponse',
  full_name='isek_node.CallResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='reply', full_name='isek_node.CallResponse.reply', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=188,
  serialized_end=217,
)


_CALLPEERREQUEST = _descriptor.Descriptor(
  name='CallPeerRequest',
  full_name='isek_node.CallPeerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='sender_node_id', full_name='isek_node.CallPeerRequest.sender_node_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='receiver_p2p_address', full_name='isek_node.CallPeerRequest.receiver_p2p_address', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='message', full_name='isek_node.CallPeerRequest.message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=219,
  serialized_end=307,
)


_CALLPEERRESPONSE = _descriptor.Descriptor(
  name='CallPeerResponse',
  full_name='isek_node.CallPeerResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='reply', full_name='isek_node.CallPeerResponse.reply', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=309,
  serialized_end=342,
)

DESCRIPTOR.message_types_by_name['P2PContextRequest'] = _P2PCONTEXTREQUEST
DESCRIPTOR.message_types_by_name['P2PContextResponse'] = _P2PCONTEXTRESPONSE
DESCRIPTOR.message_types_by_name['CallRequest'] = _CALLREQUEST
DESCRIPTOR.message_types_by_name['CallResponse'] = _CALLRESPONSE
DESCRIPTOR.message_types_by_name['CallPeerRequest'] = _CALLPEERREQUEST
DESCRIPTOR.message_types_by_name['CallPeerResponse'] = _CALLPEERRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

P2PContextRequest = _reflection.GeneratedProtocolMessageType('P2PContextRequest', (_message.Message,), {
  'DESCRIPTOR' : _P2PCONTEXTREQUEST,
  '__module__' : 'node_pb2'
  # @@protoc_insertion_point(class_scope:isek_node.P2PContextRequest)
  })
_sym_db.RegisterMessage(P2PContextRequest)

P2PContextResponse = _reflection.GeneratedProtocolMessageType('P2PContextResponse', (_message.Message,), {
  'DESCRIPTOR' : _P2PCONTEXTRESPONSE,
  '__module__' : 'node_pb2'
  # @@protoc_insertion_point(class_scope:isek_node.P2PContextResponse)
  })
_sym_db.RegisterMessage(P2PContextResponse)

CallRequest = _reflection.GeneratedProtocolMessageType('CallRequest', (_message.Message,), {
  'DESCRIPTOR' : _CALLREQUEST,
  '__module__' : 'node_pb2'
  # @@protoc_insertion_point(class_scope:isek_node.CallRequest)
  })
_sym_db.RegisterMessage(CallRequest)

CallResponse = _reflection.GeneratedProtocolMessageType('CallResponse', (_message.Message,), {
  'DESCRIPTOR' : _CALLRESPONSE,
  '__module__' : 'node_pb2'
  # @@protoc_insertion_point(class_scope:isek_node.CallResponse)
  })
_sym_db.RegisterMessage(CallResponse)

CallPeerRequest = _reflection.GeneratedProtocolMessageType('CallPeerRequest', (_message.Message,), {
  'DESCRIPTOR' : _CALLPEERREQUEST,
  '__module__' : 'node_pb2'
  # @@protoc_insertion_point(class_scope:isek_node.CallPeerRequest)
  })
_sym_db.RegisterMessage(CallPeerRequest)

CallPeerResponse = _reflection.GeneratedProtocolMessageType('CallPeerResponse', (_message.Message,), {
  'DESCRIPTOR' : _CALLPEERRESPONSE,
  '__module__' : 'node_pb2'
  # @@protoc_insertion_point(class_scope:isek_node.CallPeerResponse)
  })
_sym_db.RegisterMessage(CallPeerResponse)



_ISEKNODESERVICE = _descriptor.ServiceDescriptor(
  name='IsekNodeService',
  full_name='isek_node.IsekNodeService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=344,
  serialized_end=418,
  methods=[
  _descriptor.MethodDescriptor(
    name='call',
    full_name='isek_node.IsekNodeService.call',
    index=0,
    containing_service=None,
    input_type=_CALLREQUEST,
    output_type=_CALLRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_ISEKNODESERVICE)

DESCRIPTOR.services_by_name['IsekNodeService'] = _ISEKNODESERVICE


_ISEKP2PNODESERVICE = _descriptor.ServiceDescriptor(
  name='IsekP2PNodeService',
  full_name='isek_node.IsekP2PNodeService',
  file=DESCRIPTOR,
  index=1,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=421,
  serialized_end=587,
  methods=[
  _descriptor.MethodDescriptor(
    name='call_peer',
    full_name='isek_node.IsekP2PNodeService.call_peer',
    index=0,
    containing_service=None,
    input_type=_CALLPEERREQUEST,
    output_type=_CALLPEERRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='p2p_context',
    full_name='isek_node.IsekP2PNodeService.p2p_context',
    index=1,
    containing_service=None,
    input_type=_P2PCONTEXTREQUEST,
    output_type=_P2PCONTEXTRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_ISEKP2PNODESERVICE)

DESCRIPTOR.services_by_name['IsekP2PNodeService'] = _ISEKP2PNODESERVICE

# @@protoc_insertion_point(module_scope)
